@using DocsMan.Blazor.Client.WebSite.Shared.Components
@using DocsMan.Blazor.Client.WebSite.Shared.Support
@using DocsMan.Blazor.Shared.DTOs
@inherits LayoutComponentBase

@if (loading)
{
	<PrimeLoading />
}
else
{
	<div class="global-page">

		<header>
			<HeaderPage PhotoUrl=@imageUrl IsNotifyNotRead=@isNotifyNotRead UserName=@name />
			<SidebarPage IsRoleAdmin=@isAdmin />
		</header>

		<main class="user-main">
			@Body
		</main>

		<footer class="footer-style">
			<FooterPage />
		</footer>

	</div>
}

@code {
	bool isNotifyNotRead;
	string name;
	string imageUrl;
	bool isAdmin;

	bool loading = true;
	bool isUserAuth;
	protected override async void OnInitialized()
	{
		isUserAuth = await new ServerConnector(WebCooker).IsUserAuthorized();
		CheckAuthLinks(isUserAuth);
		await ProfileLoad();

		Thread.Sleep(1000);
		loading = false;

		StateHasChanged();
	}

	async Task ProfileLoad()
	{
		var id_resp = await new ServerGet<int>(WebCooker).DoRequest_GET("Auth/GetProfileId");
		if (id_resp.Response.IsSuccess)
		{
			var prof = await new ServerGet<ProfileDto>(WebCooker)
			.DoRequest_GET($"Profile/GetOneById/{id_resp.Value}");
			if (prof != null && prof.Value != null)
				name = prof.Value.Short_FIO;
			else
				name = "User_FIO";

			var photo = await new ServerGet<byte[]>(WebCooker)
			.DoRequest_GET($"GetPersonalPhoto/{id_resp.Value}");
			if (photo != null)
				imageUrl = CSS_Styles.GetImage(photo.Value);

			var notify = await new ServerGet<bool>(WebCooker)
			.DoRequest_GET($"IsAnyNotifyNotRead/{id_resp.Value}");
			if (notify != null)
				isNotifyNotRead = notify.Value;
			else isNotifyNotRead = false;

			var req = await new ServerGet<bool>(WebCooker)
			.DoRequest_GET($"Auth/IsAdmin/{prof.Value.UserId}");
			if (req != null)
				isAdmin = req.Value;
			else
				isAdmin = false;
		}
		CheckAuthLinks(isUserAuth);
		StateHasChanged();
	}

	bool CheckCurrentPath(string path) =>
	PagesNavigation.Uri.ToLower() == PagesNavigation.BaseUri.ToLower() + path.ToLower();
	void GoAuthorizing() => PagesNavigation.NavigateTo("/User/Authorization");
	void GoRegistration() => PagesNavigation.NavigateTo("/User/Registration");
	void GoToHome() => PagesNavigation.NavigateTo("/");
	void CheckAuthLinks(bool isUserAuth)
	{
		if (!isUserAuth) GoAuthorizing();
		if (CheckCurrentPath("User/Authorization"))
			if (isUserAuth) GoToHome();
			else GoAuthorizing();
		if (CheckCurrentPath("User/Registration"))
			if (isUserAuth) GoToHome();
			else GoRegistration();
		if (CheckCurrentPath(PagesNavigation.BaseUri) && isUserAuth) GoToHome();
	}
}