@page "/User/Trash"
@layout MainLayout
@using DocsMan.Blazor.Shared.DTOs

<PageTitle>Корзина</PageTitle>

<h3 class="page-title">Корзина</h3>

<div class="fm-box">
	<div class="fm-tools">
		<ul>
			<li @onclick="LoadDocs" class="tool-update">
				<i class="fas fa-sync-alt"></i>
			</li>
		</ul>
		<div class="file-tool">
			<ul>
				<li @onclick="DownloadDoc" class="tool @toolList[0].BlockStyle">
					<i class="fa-solid fa-download"></i>
				</li>
				<li @onclick="ReturnDoc" class="tool @toolList[1].BlockStyle">
					<i style="transform: scaleX(-1)" class="fa-solid fa-turn-up"></i>
				</li>
				<li @onclick="DeleteDoc" class="tool @toolList[5].BlockStyle">
					<i class="fa-solid fa-dumpster-fire"></i>
				</li>
				<li @onclick="()=>ChangeStyle(2)" class="tool @toolList[2].BlockStyle">
					<i class="fa-solid fa-clock-rotate-left"></i>
				</li>
				<li @onclick="()=>ChangeStyle(3)" class="tool @toolList[3].BlockStyle">
					<i class="fas fa-info"></i>
				</li>
				<li @onclick="()=>ChangeStyle(4)" class="tool @toolList[4].BlockStyle">
					<i class="fa-solid fa-link"></i>
				</li>
			</ul>
		</div>

	</div>

	<div class="fm-workspace">
		@if (loading)
		{
			<SpinnerLoading />
		}
		else
		{
			<div class="fm-docslist @docListStyle">
				<ul>
					@foreach (var item in docs)
					{
						<li @onclick="() => SelectDoc(item)" class="document @item.Style.BlockStyle">
							<i class="fas fa-file-word"></i>
							<div class="doc-name">
								@item.Document.Name@item.Document.FileType
							</div>
						</li>
					}
				</ul>
			</div>
			@if (selectedDoc != null)
			{
				<div class="fm-info @toolList[3].BlockStyle">

					<label for="name">Имя:</label>
					<p id="name">@selectedDoc.Name</p>
					<label for="type">Тип:</label>
					<p id="type">@selectedDoc.FileType</p>
					<label for="desc">Описание:</label>
					<p id="desc">@selectedDoc.Description</p>
					<label for="size">Размер файла:</label>
					<p id="size">@selectedDoc.FileSize</p>

				</div>

				<div class="fm-history @toolList[2].BlockStyle">
					@if (loadHist)
					{
						<SpinnerLoading />
					}
					else
					{
						@if (history != null)
						{
							foreach (var item in history)
							{
								<label for="datetime">Время изменения:</label>
								<p id="datetime">
									@item.DateTimeOfChanges
								</p>
								<label for="hdesc">Описание:</label>
								<p id="hdesc">@item.Description</p>
								<label for="hload">Скачать:</label>
								<p @onclick="()=>DownloadHistory(item.DocumentId, item.DateTimeOfChanges)" id="hload">
									<i class="fa-solid fa-download"></i>
								</p>
							}
						}
					}
				</div>

				<div class="fm-share @toolList[4].BlockStyle">
					<div style="margin-top:20px;">
						@if (loadShare)
						{
							<SpinnerLoading />
						}
						else
						{
							@if (profilesShare != null)
							{
								<label style="margin-left:30px;">Есть доступ:</label>
								<table style="width:360px; margin-left:20px; margin-top:10px;" class="dm-table">
									<tr>
										<td>Фото</td>
										<td>ФИО</td>
										<td>Email</td>
										<td>Удалить</td>
									</tr>
									@if (profilesShare.Count > 0)
									{
										@foreach (var item in profilesShare)
										{
											<tr>
												<td>
													<img src="@item.Image" alt="@item.Profile.Full_FIO">
												</td>
												<td>
													@item.Profile.Full_FIO
												</td>
												<td>
													@item.Profile.Email
												</td>
												<td>
													@if (item.Profile.Id != profilesShare.First().Profile.Id)
													{
														<a @onclick="() => DeleteShare(item.Profile.Id)" class="delete-icon">
															<i class="fas fa-user-minus"></i>
														</a>
													}
												</td>
											</tr>
										}
									}
								</table>
							}
						}
					</div>

					<div style="padding-top:20px; border-top:1px #ccc solid; margin-top:20px;">
						<label style="margin-left:30px;">Дать доступ:</label>
						<div style="margin-top:20px;" class="dm-add-new">
							<div class="set-data">
								<label for="find">ФИО/Email:</label>
								<br>
								<InputText @bind-Value="findLine" id="find"></InputText>
							</div>
							<button style="margin-top:20px;" @onclick="@FindProfiles" class="dm-btn create">Поиск</button>
						</div>
						@if (loadUsers)
						{
							<SpinnerLoading />
						}
						else
						{
							@if (profilesFind != null)
							{
								<table style="width:360px; margin-left:20px; margin-top:30px;" class="dm-table">
									<tr>
										<td>Фото</td>
										<td>ФИО</td>
										<td>Email</td>
										<td>Добавить</td>
									</tr>
									@if (profilesFind.Count > 0)
									{
										@foreach (var item in profilesFind)
										{
											<tr>
												<td>
													<img src="@item.Image" alt="@item.Profile.Full_FIO">
												</td>
												<td>
													@item.Profile.Full_FIO
												</td>
												<td>
													@item.Profile.Email
												</td>
												<td>
													<a @onclick="()=>CreateShare(item.Profile.Id)" class="link-icon">
														<i class="fas fa-user-plus"></i>
													</a>
												</td>
											</tr>
										}
									}
								</table>
							}
						}
					</div>
				</div>
			}
		}
	</div>


</div>

<ResponseResultPage RequestResult="@resp" IsWasSendRequest="@isClick" OpenCloseStyles="@CSS_Styles.OpenCloseStyles" />

@code {

	bool loading = true;
	bool isClick = false;
	RequestResultDto? resp;

	protected override async void OnInitialized()
	{
		loading = true;

		await LoadDocs();

		await Task.Delay(500);
		loading = false;
		StateHasChanged();
	}

	List<(DocumentDto Document, ToggleStyleCSS Style)> docs = new();
	async Task LoadDocs()
	{
		isClick = true;
		loading = true;

		var req = await new ServerGet<IEnumerable<DocumentDto>?>(WebCooker)
		.DoRequest_GET("FileManager/GetTrash");

		docs = new();
		if (req.Response.IsSuccess)
			if (req.Value != null)
			{
				foreach (var item in req.Value)
				{
					docs.Add(new(item, new ToggleStyleCSS("", "selected", "")));
				}
				docs.ForEach(x => x.Style.IsDisabled = false);
			}
		selectedDoc = null;
		toolList.ForEach(x => x.IsDisabled = true);
		toolList.ForEach(x => x.IsOpen = false);
		docListStyle = toolList.Any(x => x.IsOpen) ? "open" : "";
		
		await Task.Delay(500);
		loading = false;
	}

	List<ToggleStyleCSS> toolList = new()
{		
		//	download			return
		new("", "", "disabled"), new("", "", "disabled"),
		//	history 			info
		new("", "open", "disabled"), new("", "open", "disabled"),
		//	peoples access			delete
		new("", "open", "disabled"), new("", "", "disabled"),
	};
	string docListStyle = "";
	async Task ChangeStyle(int id)
	{
		isClick = false;

		if (selectedDoc != null)
		{
			for (int i = 0; i <= 5; i++)
			{
				if (i != id)
					toolList[i].IsOpen = false;
				else
					toolList[id].IsOpen = !toolList[id].IsOpen;
			}
			docListStyle = toolList.Any(x => x.IsOpen) ? "open" : "";

			if (id == 2)
				await LoadHistory();
			if (id == 4)
				await LoadShareProfiles();
		}
	}

	List<DocumentHistoryDto> history;
	bool loadHist = false;
	async Task LoadHistory()
	{
		if (selectedDoc != null)
		{
			loadHist = true;

			var req = await new ServerGet<IEnumerable<DocumentHistoryDto>?>(WebCooker)
		.DoRequest_GET($"FileManager/GetHistory/{selectedDoc.Id}");
			history = req.Value.ToList();

			await Task.Delay(500);
			loadHist = false;
			StateHasChanged();
		}
	}


	DocumentDto selectedDoc;
	async void SelectDoc((DocumentDto Document, ToggleStyleCSS Style) doc)
	{
		isClick = false;
		for (int i = 0; i < docs.Count; i++)
		{
			if (docs[i].Document.Id != doc.Document.Id)
				docs[i].Style.IsOpen = false;
			else
				doc.Style.IsOpen = !doc.Style.IsOpen;
		}
		if (doc.Style.IsOpen)
		{
			selectedDoc = doc.Document;
			for (int i = 0; i <= 5; i++)
				toolList[i].IsDisabled = false;

			if (toolList[2].IsOpen)
				await LoadHistory();
			if (toolList[4].IsOpen)
				await LoadShareProfiles();
		}
		else
		{
			selectedDoc = null;
			for (int i = 0; i <= 5; i++)
			{
				toolList[i].IsOpen = false;
				toolList[i].IsDisabled = true;
			}
		}
	}

	void DownloadDoc()
	{
		if (selectedDoc != null)
		{
			PagesNavigation.NavigateTo(
				ServerConnector.DoDownload($"FileManager/DownloadDocument/{selectedDoc.Id}"));
		}
	}
	void DownloadHistory(int id, string time)
	{
		PagesNavigation.NavigateTo(
		ServerConnector.DoDownload($"FileManager/DownloadHistoryFile/{id}/{time}"));
	}

	async Task ReturnDoc()
	{
		if (selectedDoc != null)
		{
			loading = true;

			var req = await new ServerDelete(WebCooker)
			.DoRequest_DELETE($"FileManager/ReturnDocument/{selectedDoc.Id}");
			resp = req;

			await LoadDocs();

			await Task.Delay(500);
			loading = false;
			StateHasChanged();
		}
	}

	async Task DeleteDoc()
	{
		if (selectedDoc != null)
		{
			loading = true;

			var req = await new ServerDelete(WebCooker)
			.DoRequest_DELETE($"FileManager/DeleteDocument/{selectedDoc.Id}");
			resp = req;

			await LoadDocs();

			await Task.Delay(500);
			loading = false;
			StateHasChanged();
		}
	}

	bool loadShare = false;
	bool loadUsers = false;
	List<(ProfileDto Profile, string Image)> profilesShare;
	List<(ProfileDto Profile, string Image)> profilesFind;

	async Task LoadShareProfiles()
	{
		if (selectedDoc != null)
		{
			isClick = true;
			loadShare = true;

			profilesShare = new();

			var req = await new ServerGet<IEnumerable<ProfileDto>?>(WebCooker)
			.DoRequest_GET($"FileManager/GetSharedProfiles/{selectedDoc.Id}");
			foreach (var item in req.Value.ToList())
			{
				string photo = CSS_Styles.GetImage(
					(await new ServerGet<byte[]>(WebCooker)
					.DoRequest_GET($"Profile/GetPersonalPhoto/{item.Id}")).Value);

				profilesShare.Add((item, photo));
			}

			await Task.Delay(500);
			loadShare = false;
			StateHasChanged();
		}
	}

	async Task DeleteShare(int profileId)
	{
		if (selectedDoc != null)
		{
			resp = await new ServerDelete(WebCooker)
				.DoRequest_DELETE($"FileManager/DeleteShareDocument/{profileId}/{selectedDoc.Id}");

			await LoadShareProfiles();
		}
	}

	string findLine = string.Empty;
	async Task FindProfiles()
	{
		if (!string.IsNullOrWhiteSpace(findLine))
		{
			isClick = true;
			loadUsers = true;

			profilesFind = new();

			var req = await new ServerGet<IEnumerable<ProfileDto>?>(WebCooker)
		.DoRequest_GET($"Profile/GetFind/{findLine}");
			resp = req;
			foreach (var item in req.Value.ToList())
			{
				string photo = CSS_Styles.GetImage(
					(await new ServerGet<byte[]>(WebCooker)
					.DoRequest_GET($"Profile/GetPersonalPhoto/{item.Id}")).Value);

				profilesFind.Add((item, photo));
			}

			await Task.Delay(500);
			loadUsers = false;
			Console.WriteLine(profilesFind.Count);
			StateHasChanged();
		}
	}

	async Task CreateShare(int profileId)
	{
		Console.WriteLine(profileId);

		if (selectedDoc != null)
		{
			isClick = true;
			resp = await new ServerDelete(WebCooker)
			.DoRequest_DELETE($"FileManager/ShareDocument/{profileId}/{selectedDoc.Id}");

			await LoadShareProfiles();
		}
	}
}