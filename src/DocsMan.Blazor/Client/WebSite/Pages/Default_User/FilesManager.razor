@page "/User/Files"
@layout MainLayout
@using DocsMan.Blazor.Shared.DTOs

<PageTitle>FilesManager</PageTitle>

<h3 class="page-title">FilesManager</h3>

<div class="fm-box">
	<div class="fm-tools">
		<ul>
			<li @onclick="LoadDocs" class="tool-update">
				<i class="fas fa-sync-alt"></i>
			</li>
		</ul>
		<div class="file-tool">
			<ul>
				<li @onclick="()=>ChangeStyle(0)" class="tool @toolList[0].BlockStyle">
					<i class="fas fa-file-upload"></i>
				</li>
				<li @onclick="()=>ChangeStyle(1)" class="tool @toolList[1].BlockStyle">
					<i class="fas fa-pen"></i>
				</li>
				<li class="tool @toolList[2].BlockStyle">
					<i class="fas fa-file-download"></i>
				</li>
				<li class="tool @toolList[3].BlockStyle">
					<i class="fas fa-trash-alt"></i>
				</li>
				<li @onclick="()=>ChangeStyle(4)" class="tool @toolList[4].BlockStyle">
					<i class="fas fa-history"></i>
				</li>
				<li @onclick="()=>ChangeStyle(5)" class="tool @toolList[5].BlockStyle">
					<i class="fas fa-info"></i>
				</li>
				<li @onclick="()=>ChangeStyle(6)" class="tool @toolList[6].BlockStyle">
					<i class="fa-solid fa-users"></i>
				</li>
			</ul>
		</div>

		<div class="folder-tool">
			<ul>
				<li class="tool @toolList[7].BlockStyle">
					<i class="fas fa-folder-plus"></i>
				</li>
				<li @onclick="()=>ChangeStyle(8)" class="tool @toolList[8].BlockStyle">
					<i class="fas fa-edit"></i>
				</li>
				<li class="tool @toolList[9].BlockStyle">
					<i class="fas fa-folder-minus"></i>
				</li>
				<li @onclick="()=>ChangeStyle(10)" class="tool @toolList[10].BlockStyle">
					<i class="fas fa-info"></i>
				</li>
			</ul>
		</div>

	</div>

	<div class="fm-workspace">
		@if (loading)
		{
			<SpinnerLoading />
		}
		else
		{
			<div class="fm-upload @toolList[0].BlockStyle">
				<div class="dm-add-new">
					<div class="set-data">
						<label for="o-file">Upload File</label>
						<br>
						<InputFile OnChange="OnInputFile" id="o-file"></InputFile>
						<button @onclick="@SendFile" class="dm-btn create">Create Document</button>
					</div>
				</div>
			</div>

			<div class="fm-docslist">
				<ul>
					@foreach (var item in docs)
					{
						<li @onclick="() => SelectDoc(item)" class="document @item.Style.BlockStyle">
							<i class="fas fa-file-word"></i>
							<div class="doc-name">
								@item.Document.Name@item.Document.FileType
							</div>
						</li>
					}
				</ul>
			</div>
			@if (selectedDoc != null)
			{
				<div class="fm-info @toolList[5].BlockStyle">

					<label for="name">DocName:</label>
					<p id="name">@selectedDoc.Name</p>
					<label for="type">DocType:</label>
					<p id="type">@selectedDoc.FileType</p>
					<label for="desc">DocDesc:</label>
					<p id="desc">@selectedDoc.Description</p>
					<label for="size">DocSize:</label>
					<p id="size">@selectedDoc.FileSize</p>

				</div>

				<div class="fm-history @toolList[4].BlockStyle">
					<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Ab ad aliquam eum qui amet, beatae voluptate
						numquam totam debitis sunt non aliquid, quae optio magnam suscipit! Harum consequatur quos sint.</p>

				</div>

				<div class="fm-change @toolList[1].BlockStyle">
					<p>Elit amet mollit irure exercitation nisi nulla ut excepteur culpa do consequat ad aute.</p>
				</div>

				<div class="fm-share @toolList[6].BlockStyle">
					<p>Duis duis mollit nulla fugiat proident labore laborum consectetur commodo enim labore mollit et.</p>

				</div>
			}
		}
	</div>


</div>

<ResponseResultPage RequestResult="@resp" IsWasSendRequest="@isClick" OpenCloseStyles="@CSS_Styles.OpenCloseStyles" />

@code {

	bool loading = true;
	bool isClick = false;
	RequestResultDto? resp;

	protected override async void OnInitialized()
	{
		loading = true;

		toolList[0].IsDisabled = false;
		toolList[7].IsDisabled = false;

		await LoadDocs();

		await Task.Delay(500);
		loading = false;
		StateHasChanged();
	}

	List<(DocumentDto Document, ToggleStyleCSS Style)> docs = new();
	async Task LoadDocs()
	{
		isClick = true;
		loading = true;

		var req = await new ServerGet<IEnumerable<DocumentDto>?>(WebCooker)
		.DoRequest_GET("FileManager/GetDocs");

		docs = new();
		if (req.Response.IsSuccess)
			if (req.Value != null)
			{
				foreach (var item in req.Value)
				{
					docs.Add(new(item, new ToggleStyleCSS("", "selected", "")));
				}
				docs.ForEach(x => x.Style.IsDisabled = false);
			}
		resp = req;

		await Task.Delay(500);
		loading = false;
	}

	List<ToggleStyleCSS> toolList = new()
	{
		//	upload file			change
		new("", "open", ""), new("", "open", "disabled"),
		//	download			delete
		new("", "", "disabled"), new("", "", "disabled"),
		//	history 			info
		new("", "open", "disabled"), new("", "open", "disabled"),
		//	peoples access
		new("", "open", "disabled"),

		//	add folder			change
		new("", "", ""), new("", "open", "disabled"),
		//	delete folder		info
		new("", "", "disabled"), new("", "open", "disabled"),
	};
	void ChangeStyle(int id)
	{
		isClick = false;
		if (id == 0 || id == 7)
			toolList[id].IsOpen = !toolList[id].IsOpen;
		else
		if (selectedDoc != null)
		{
			for (int i = 1; i <= 6; i++)
			{
				if (i != id)
					toolList[i].IsOpen = false;
				else
					toolList[id].IsOpen = !toolList[id].IsOpen;
			}
		}
	}

	DocumentDto selectedDoc;
	void SelectDoc((DocumentDto Document, ToggleStyleCSS Style) doc)
	{
		isClick = false;
		for (int i = 0; i < docs.Count; i++)
		{
			if (docs[i].Document.Id != doc.Document.Id)
				docs[i].Style.IsOpen = false;
			else
				doc.Style.IsOpen = !doc.Style.IsOpen;
		}
		if (doc.Style.IsOpen)
		{
			selectedDoc = doc.Document;
			for (int i = 1; i <= 6; i++)
				toolList[i].IsDisabled = false;
		}
		else
		{
			selectedDoc = null;
			for (int i = 1; i <= 6; i++)
			{
				toolList[i].IsOpen = false;
				toolList[i].IsDisabled = true;
			}
		}
	}

	bool fileUploaded = false;
	DataFile newFile = new();
	async Task OnInputFile(InputFileChangeEventArgs e)
	{
		var file = e.GetMultipleFiles().FirstOrDefault();
		if (file == null)
		{
			fileUploaded = false;
			return;
		}
		else
		{
			fileUploaded = true;
			newFile.FileName = file.Name;
			using (var ms = new MemoryStream())
			{
				await file.OpenReadStream(maxAllowedSize: 102400000).CopyToAsync(ms);
				newFile.FileData = ms.ToArray();
			}
		}
	}

	async Task SendFile()
	{
		if (!fileUploaded)
			return;

		isClick = true;
		loading = true;

		resp = await new ServerPost<DataFile>(WebCooker)
		.DoRequest_POST("FileManager/AddDocument", newFile);

		await Task.Delay(500);
		loading = false;
		StateHasChanged();
	}
}